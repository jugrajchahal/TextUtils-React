{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","prototypes","PropTypes","string","isRequired","defaultProps","TextForm","useState","text","setText","heading","for","value","onChange","event","target","style","backgroundColor","rows","disabled","length","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","showAlert","split","filter","element","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","body","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0OAIA,SAASA,EAAOC,GACZ,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACA,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,2BAA2BE,KAAK,IAA7C,SAAkDH,EAAMI,QAExD,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SAEE,mBAAGA,UAAU,+BAA+B,eAAa,OAAOE,KAAK,IAArE,sBAON,sBAAKF,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACE,uBAAOD,UAAU,mBAAmBM,QAAUP,EAAMQ,WAAYH,KAAK,WAAWI,KAAK,SAASH,GAAG,2BACjG,uBAAOL,UAAU,mBAAmBS,QAAQ,yBAA5C,wCAQZX,EAAOY,WAAY,CACdP,MAAOQ,IAAUC,OAAOC,YAGzBf,EAAOgB,aAAc,CACjBX,MAAO,kBAEAL,QCqBEiB,MA5DjB,SAAkBhB,GACd,IAiCF,EAAwBiB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACE,qCACA,sBAAKlB,UAAU,YAAf,UACE,6BAAKD,EAAMoB,UACX,sBAAKnB,UAAU,OAAf,UACE,uBAAOoB,IAAI,QAAQpB,UAAU,eAC/B,0BAAUA,UAAU,eAAeqB,MAAOJ,EAAMK,SAd3B,SAACC,GAElBL,EAAQK,EAAMC,OAAOH,QAYiDI,MAAO,CAACC,gBAA6B,SAAb3B,EAAME,KAAc,UAAU,SAASI,GAAG,QAAQsB,KAAK,SAEzJ,wBAAQC,SAAwB,IAAdX,EAAKY,OAAY7B,UAAU,4BAA4BM,QA3CrD,WAElB,IAAIwB,EAAUb,EAAKc,cACnBb,EAAQY,IAwCV,mCACA,wBAAQF,SAAwB,IAAdX,EAAKY,OAAW7B,UAAU,4BAA4BM,QAtCpD,WAElB,IAAIwB,EAAUb,EAAKe,cACnBd,EAAQY,IAmCV,mCACA,wBAAQF,SAAwB,IAAdX,EAAKY,OAAW7B,UAAU,4BAA4BM,QAlCjD,WAErBY,EADc,KAiChB,wBACA,wBAAQU,SAAwB,IAAdX,EAAKY,OAAW7B,UAAU,4BAA4BM,QA/BvD,WAEjB,IAAIW,EAAOgB,SAASC,eAAe,SACnCjB,EAAKkB,SACLC,UAAUC,UAAUC,UAAUrB,EAAKI,OACnCY,SAASM,eAAeC,kBACxBzC,EAAM0C,UAAU,uBAAwB,YAyBxC,0BAGD,sBAAKzC,UAAU,iBAAf,UACI,oBAAIA,UAAU,YAAd,+BACA,8BAAIiB,EAAKyB,MAAM,KAAKC,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQf,UAAaA,OAAnE,cAAsFZ,EAAKY,OAA3F,iBACA,8BAAI,KAAQZ,EAAKyB,MAAM,KAAKC,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQf,UAAaA,OAA3E,mBACA,yCACA,mBAAG7B,UAAU,YAAb,SAA0BiB,EAAKY,OAAO,EAAEZ,EAAK,8BC1CvC4B,MAbf,SAAe9C,GAKX,OAAS,qBAAK0B,MAAO,CAACqB,OAAO,QAApB,SACR/C,EAAMgD,OAAS,sBAAK/C,UAAS,sBAAiBD,EAAMgD,MAAM3C,KAA7B,gCAAiEI,KAAK,QAApF,UAChB,iCANmB,SAACwC,GAChB,IAAMC,EAAQD,EAAKhB,cACnB,OAAOiB,EAAMC,OAAO,GAAGnB,cAAgBkB,EAAME,MAAM,GAI9CC,CAAWrD,EAAMgD,MAAM3C,QAAgBL,EAAMgD,MAAMM,UCoDjDC,MAhDf,WACC,MAAuBtC,mBAAS,SAAhC,mBAAMf,EAAN,KAAYsD,EAAZ,KACA,EAA0BvC,mBAAS,MAAnC,mBAAO+B,EAAP,KAAcS,EAAd,KAWMjD,EAAa,WACN,UAARN,GACDsD,EAAS,QACTtB,SAASwB,KAAKhC,MAAMC,gBAAkB,YAKtC6B,EAAS,SACTtB,SAASwB,KAAKhC,MAAMC,gBAAkB,UAK3C,OACA,qCAEC,cAAC,EAAD,CAAQvB,MAAM,YAAYF,KAAMA,EAAMM,WAAaA,IACnD,cAAC,EAAD,CAAOwC,MAAOA,IACd,qBAAK/C,UAAU,iBAAf,SAGW,cAAC,EAAD,CAAUC,KAAMA,EAAMwC,UA/Bf,SAACiB,EAAStD,GAC1BoD,EAAS,CACPH,IAAKK,EACLtD,KAAMA,IAERuD,YAAW,WACTH,EAAS,QACR,OAwBkDjD,WAAaA,EAAYY,QAAQ,0CCpC1EyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASC,eAAe,SAM1B0B,M","file":"static/js/main.bde5e6bc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n// import { Link } from \"react-router-dom\";\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand text-danger\" href=\"#\">{props.title}</a>\r\n          {/* <a className=\"navbar-brand text-danger\" href=\"#\">{props.title}</a> */}\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active text-primary\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active text-primary\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n               {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link text-primary\" to=\"/about\">About</Link>\r\n              </li>  */}\r\n            </ul>\r\n      \r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n         </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototypes ={\r\n     title: PropTypes.string.isRequired\r\n    };\r\n\r\n    Navbar.defaultProps ={\r\n        title: 'Set Title Here',\r\n    }\r\nexport default Navbar","import React, {useState} from 'react'\r\n\r\nfunction TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        // props.showAlert(\"Converted To Upper Case\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText)\r\n    }\r\n    const handleCopy = ()=>{\r\n      \r\n      var text = document.getElementById(\"mybox\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      document.getSelection().removeAllRanges();\r\n      props.showAlert(\" Copyed To Clipboard\", \"success\");\r\n    }\r\n    // const handleExtraSpaces = (event) =>{\r\n    //     let newText = text.split(/[ ]+/);\r\n    //     setText(newText.join[\" \"])\r\n    // }\r\n    const handleOnChange = (event)=>{\r\n          // console.log(\"On Change\");\r\n          setText(event.target.value);\r\n    }\r\n  \r\n  \r\n  const [text, setText] = useState('');\r\n        //   setText(\"new text\")\r\n  return(\r\n    <>\r\n    <div className=\"container\">\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <label for=\"myBox\" className=\"form-label\"></label>\r\n      <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'#909099':'white'}}id=\"mybox\" rows=\"5\"></textarea>\r\n      </div>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick} >Convert To Upper Case</button>\r\n      <button disabled={text.length===0}className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick} >Convert To Lower Case</button>\r\n      <button disabled={text.length===0}className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick} >Clear Text</button>\r\n      <button disabled={text.length===0}className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy} >Copy Text</button>\r\n      {/* <button className=\"btn btn-primary mx-3\" onClick={handleExtraSpaces} >Remove Extra Spaces</button> */}\r\n     </div>\r\n     <div className=\"container my-3\">\r\n         <h2 className=\"text-dark\">Your text Summery</h2>\r\n         <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} Characters</p>\r\n         <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes Read</p>\r\n         <h2>Preview</h2>\r\n         <p className=\"text-dark\">{text.length>0?text:\"Nothing To Preview\"}</p>\r\n     </div>\r\n   </>\r\n  )\r\n  }\r\n  export default TextForm","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return ( <div style={{height:'40px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>{props.alert.msg}\r\n    </div>}\r\n     </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport { useState } from \"react\";\nimport \"./App.css\";\n// import About from \"./components/About\"; \nimport Navbar from './components/Navbar';\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n// import {Routes ,Route } from 'react-router-dom';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\nfunction App() {\n const[mode, setMode] = useState('light');\n const [alert, setAlert] = useState(null);\n\n const showAlert = (message, type)=>{\n   setAlert({\n     msg: message,\n     type: type,\n   })\n   setTimeout(() => {\n     setAlert(null);\n   }, 1500);\n  }\n const toggleMode = ()=>{\n   if(mode=== 'light'){\n     setMode ('dark');\n     document.body.style.backgroundColor = '#909099';\n    //  showAlert(\" Dark Mode Has Been Enabled\", \"success\")\n    //  document.title = 'TextUtils - Dark Mode';\n   }\n   else{\n     setMode ('light');\n     document.body.style.backgroundColor = 'white';\n    //  showAlert(\" Light Mode Has Been Enabled\", \"success\")\n    //  document.title = 'TextUtils - Light Mode';\n   }\n }\nreturn (\n<>\n{/* <Router> */}\n <Navbar title=\"TextUtils\" mode={mode} toggleMode= {toggleMode}/>\n <Alert alert={alert}/>\n <div className=\"container my-3\">\n  {/* <Switch> */}\n            {/* <Route exact path=\"/\">  */}\n            <TextForm mode={mode} showAlert={showAlert} toggleMode= {toggleMode} heading=\"Enter The Text To Analyze Below\"/>\n          {/* </Route> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About mode={mode} /> */}\n          {/* </Route> */}\n          \n  {/* </Switch> */}\n </div>\n{/* </Router> */}\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}